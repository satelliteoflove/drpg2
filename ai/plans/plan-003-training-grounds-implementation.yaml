version: "0.1"
plan_id: "training-grounds-implementation-003"
project_name: "Wizardry Gaiden IV Training Grounds Implementation"
agent_profile: "ai-coding-agent-v1"
entry_node: "analyze-training-requirements"

context:
  business_goal: "Implement Training Grounds for class changes following WGIV mechanics"
  non_functional_requirements:
    - "Maintain TypeScript strict mode compliance"
    - "Preserve character progression data during class change"
    - "Use existing UI patterns"
    - "Ensure save game integrity"
  personas:
    - name: "Player"
      need: "Change character classes when meeting requirements"
    - name: "Developer"
      need: "Clean class change system that preserves game balance"

architecture:
  overview: "Training Grounds scene for managing character class changes with WGIV rules"
  constraints:
    - "Follow WGIV class change rules exactly"
    - "Preserve HP and learned spells"
    - "Reset stats to racial minimums"
    - "No gold cost for class changes"
  integration_points:
    - "Town scene navigation"
    - "Character class system"
    - "Spell learning system"
    - "Experience system"

nodes:
  - id: "analyze-training-requirements"
    status: "Ready"
    materialization: 0.0
    description: "Document Training Grounds requirements from WGIV"
    detailed_description: |
      Based on research, WGIV class change mechanics:
      - Character must meet new class stat requirements
      - Level resets to 1, XP to 0
      - Stats reset to racial minimums (before bonus points)
      - HP retained from previous class
      - Spells retained (1 SP per spell level known)
      - Equipment unequipped (may not meet new requirements)
      - Age may increase (1-2 years typical)
      - No gold cost
      - Cannot change to same class
    outputs: ["docs/training-grounds-requirements.md"]
    agent_action: "Document requirements"
    role: "agent"
    downstream: ["create-training-types"]

  - id: "create-training-types"
    status: "Ready"
    materialization: 0.0
    description: "Create TypeScript types for Training Grounds"
    detailed_description: |
      Create types in src/types/TrainingTypes.ts:
      - TrainingState type (main, selectCharacter, selectClass, confirmChange, changeResult)
      - ClassChangeResult interface
      - ClassRequirements interface (stat minimums per class)
      - RetainedAbilities interface (HP, spells, spell points)
    outputs: ["src/types/TrainingTypes.ts"]
    agent_action: "Create type definitions"
    role: "agent"
    downstream: ["create-training-state-manager"]

  - id: "create-training-state-manager"
    status: "Ready"
    materialization: 0.0
    description: "Create Training Grounds state management"
    detailed_description: |
      Create src/systems/training/TrainingStateManager.ts:
      - Track current state and selected character
      - Calculate eligible classes based on stats
      - Validate class change requirements
      - Store class change preview data
      - Handle multi-step confirmation flow
    outputs: ["src/systems/training/TrainingStateManager.ts"]
    agent_action: "Implement state manager"
    role: "agent"
    downstream: ["create-class-change-handler"]

  - id: "create-class-change-handler"
    status: "Ready"
    materialization: 0.0
    description: "Create class change execution handler"
    detailed_description: |
      Create src/systems/training/ClassChangeHandler.ts:
      - Reset character to level 1, XP to 0
      - Set stats to racial minimums
      - Preserve current HP total
      - Preserve learned spells
      - Set SP to 1 per spell level known
      - Unequip all items
      - Age character by 1-2 years
      - Update character class
      - Log change details to message log
    outputs: ["src/systems/training/ClassChangeHandler.ts"]
    agent_action: "Implement class change handler"
    role: "agent"
    acceptance_criteria:
      - "Stats reset correctly"
      - "HP preserved"
      - "Spells retained"
      - "Equipment unequipped"
    downstream: ["create-training-ui-renderer"]

  - id: "create-training-ui-renderer"
    status: "Ready"
    materialization: 0.0
    description: "Create Training Grounds UI renderer"
    detailed_description: |
      Create src/systems/training/TrainingUIRenderer.ts:
      - Three-panel layout
      - Left: Party list with current classes
      - Center: Available classes and requirements
      - Right: Character stats comparison (before/after)
      - Highlight eligible classes in green
      - Show unavailable classes in grey with unmet requirements
      - Display class change preview
    outputs: ["src/systems/training/TrainingUIRenderer.ts"]
    agent_action: "Implement UI renderer"
    role: "agent"
    downstream: ["create-training-input-handler"]

  - id: "create-training-input-handler"
    status: "Ready"
    materialization: 0.0
    description: "Create Training Grounds input handler"
    detailed_description: |
      Create src/systems/training/TrainingInputHandler.ts:
      - Arrow keys for navigation
      - Enter to select character/class
      - Y/N for confirmation
      - Escape to return to Town
      - Number keys for quick character selection
      - Show help text for controls
    outputs: ["src/systems/training/TrainingInputHandler.ts"]
    agent_action: "Implement input handler"
    role: "agent"
    downstream: ["create-training-scene"]

  - id: "create-training-scene"
    status: "Ready"
    materialization: 0.0
    description: "Create main Training Grounds scene"
    detailed_description: |
      Create src/scenes/TrainingGroundsScene.ts:
      - Integrate all Training components
      - Initialize with party data
      - Handle scene transitions
      - Message log integration
      - Save after class changes
      - ASCII layer support
    outputs: ["src/scenes/TrainingGroundsScene.ts", "src/rendering/ascii/TrainingGroundsASCII.ts"]
    agent_action: "Implement Training Grounds scene"
    role: "agent"
    downstream: ["update-character-class-change"]

  - id: "update-character-class-change"
    status: "Ready"
    materialization: 0.0
    description: "Update Character class to support class changes"
    detailed_description: |
      Update src/entities/Character.ts:
      - Add previousClass property
      - Add classChangeCount property
      - Add retainedHP property
      - Update stat assignment for class changes
      - Preserve spell knowledge through changes
      - Handle equipment validation
    outputs: ["src/entities/Character.ts"]
    agent_action: "Update Character class"
    role: "agent"
    downstream: ["integrate-training-with-town"]

  - id: "integrate-training-with-town"
    status: "Ready"
    materialization: 0.0
    description: "Add Training Grounds to Town scene"
    detailed_description: |
      Update src/scenes/TownScene.ts:
      - Add Training Grounds menu option
      - Scene transition to TrainingGroundsScene
      Update src/core/Game.ts:
      - Register TrainingGroundsScene
    outputs: ["src/scenes/TownScene.ts", "src/core/Game.ts"]
    agent_action: "Integrate Training Grounds"
    role: "agent"
    downstream: ["test-class-changes"]

  - id: "test-class-changes"
    status: "Ready"
    materialization: 0.0
    description: "Test class change functionality"
    detailed_description: |
      Test all Training Grounds features:
      - Class eligibility calculation
      - Stat reset to racial minimums
      - HP preservation
      - Spell retention
      - Equipment unequipping
      - Age increase
      - Save/load after changes
    outputs: ["test results"]
    agent_action: "Manual testing via AI interface"
    role: "agent"
    acceptance_criteria:
      - "Class changes work correctly"
      - "Character data preserved appropriately"
      - "UI displays properly"