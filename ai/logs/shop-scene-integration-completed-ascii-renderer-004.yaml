node_id: shop-scene-integration
checklist:
  unit_tests: false
  integration_tests: true
  e2e_tests: true
outcome: |
  Successfully integrated ShopASCIIState into ShopScene.ts with full feature flag support.
  The Shop scene now has bidirectional ASCII rendering that can be toggled at runtime.
  Created comprehensive Playwright test suite that verifies all major Shop functionality
  in ASCII mode. All 6 tests passing consistently.
manual_test_instructions: |
  1. Start the dev server with 'npm run dev'
  2. Navigate to http://localhost:8080
  3. In the browser console, run: window.FeatureFlags.enable('ASCII_RENDERING')
  4. Start a new game or load an existing game
  5. Navigate to Town (if not already there)
  6. Use arrow keys to select "Shop" and press Enter
  7. Verify the shop displays in ASCII mode with the title "BOLTAC'S TRADING POST [ASCII MODE]"
  8. Test navigation:
     - Arrow keys to move between menu options
     - Enter to select an option
     - Escape to go back
  9. Test Buy Items flow:
     - Select Buy Items -> Select category -> Browse items -> Select character
  10. Test toggling: In console, run window.FeatureFlags.disable('ASCII_RENDERING')
      - Shop should switch to canvas rendering
      - Run window.FeatureFlags.enable('ASCII_RENDERING') to switch back
  11. Test Leave Shop to return to Town
surprises_or_notes: |
  - ShopASCIIState was already created but not integrated into ShopScene
  - FeatureFlags API uses enable/disable methods, not setFlag
  - CanvasRenderer expects HTMLCanvasElement, not CanvasRenderingContext2D
  - getGrid() returns ASCIIState which has its own getGrid() method (nested)
  - All shop states are properly synced: main_menu, buying_category, buying_items,
    buying_character_select, selling_character_select, selling_items,
    selling_confirmation, pooling_gold
suggested_follow_ups:
  - Complete InventoryScene ASCII integration
  - Add ASCII state persistence to save/load system
  - Optimize ASCII rendering performance for complex shop inventories
  - Add ASCII-specific shop inventory display optimizations
  - Create ASCII state for remaining unimplemented shop features (Identify, Remove Curses)
reimplementation_prompt: |
  Integrate ASCII rendering into ShopScene for a Wizardry-like dungeon crawler game.

  Requirements:
  - Integrate existing ShopASCIIState class into ShopScene
  - Support runtime toggling via FeatureFlags.isEnabled('ASCII_RENDERING')
  - Maintain bidirectional state sync between Scene and ASCII state
  - Support all shop states: main menu, buying, selling, pooling gold
  - Use CanvasRenderer to render ASCII grid to canvas
  - Call syncASCIIState() after every state change in input handlers
  - Use window.FeatureFlags.enable/disable for feature flag control
  - Pass ctx.canvas (not ctx) to CanvasRenderer constructor
  - Access nested grid with asciiState.getGrid().getGrid()

  Key implementation details:
  - Add asciiState, asciiRenderer, and useASCII properties
  - Check feature flag in constructor, enter(), and renderLayered()
  - Create syncASCIIState() method to update all ASCII state properties
  - Handle ASCII state lifecycle in enter() and exit() methods
  - Render ASCII grid in renderLayered() when feature is enabled