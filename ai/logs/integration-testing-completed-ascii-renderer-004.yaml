node_id: integration-testing
checklist:
  unit_tests: false
  integration_tests: true
  e2e_tests: true
outcome: |
  Successfully completed ASCII integration for all remaining game scenes.
  - ShopScene: Already integrated, 6 tests passing
  - InventoryScene: Newly integrated with ASCII state, 6 tests passing
  - All 5 main scenes now have ASCII rendering capability
  - Zero TypeScript compilation errors
  - Feature flag system working for all scenes
manual_test_instructions: |
  1. Start the development server with 'npm run dev'
  2. Open http://localhost:8080 in browser
  3. Open browser console (F12)
  4. Enable ASCII rendering: window.FeatureFlags.enable('ASCII_RENDERING')

  Test ShopScene:
  5. From town, navigate to Shop (arrow down + enter)
  6. Verify ASCII rendering shows shop menu
  7. Test navigation through Buy Items, categories, item lists
  8. Test Sell Items flow
  9. Test Pool Gold functionality
  10. Verify ESC returns to town

  Test InventoryScene:
  11. From town, navigate to Dungeon
  12. Press 'i' to open inventory
  13. Verify ASCII rendering shows character list
  14. Press 'i' again to view character inventory
  15. Press 'e' to view equipment
  16. Test item selection and scrolling if items exceed screen
  17. Press ESC to return to dungeon

  Toggle Test:
  18. While in any scene, disable ASCII: window.FeatureFlags.disable('ASCII_RENDERING')
  19. Verify scene reverts to canvas rendering
  20. Re-enable: window.FeatureFlags.enable('ASCII_RENDERING')
  21. Verify scene returns to ASCII rendering
surprises_or_notes: |
  - ShopScene was already fully integrated with ASCII rendering
  - InventoryScene integration was straightforward following established patterns
  - The tradeItem field wasn't needed for ASCII display, simplified the implementation
  - All scene transitions work smoothly with ASCII enabled
suggested_follow_ups:
  - Implement save/load functionality with ASCII state persistence
  - Add ASCII rendering for any remaining UI elements (message popups, etc.)
  - Performance optimization for ASCII rendering if needed
  - Update documentation with complete ASCII system overview
  - Consider adding ASCII-specific visual enhancements (colors, animations)
reimplementation_prompt: |
  Complete the ASCII rendering integration for all game scenes in a TypeScript dungeon crawler game.

  Context:
  - Game has 5 main scenes: TownScene, ShopScene, CombatScene, DungeonScene, InventoryScene
  - ASCII rendering system already exists with BaseASCIIScene abstract class
  - Feature flag system controls ASCII rendering (FeatureFlags class)
  - Each scene needs an ASCIIState class extending BaseASCIIScene

  Requirements:
  1. Create InventoryASCIIState class:
     - Extend BaseASCIIScene
     - Handle all inventory modes: character_select, inventory, equipment, trade_select, trade_target
     - Implement scrolling for long item lists
     - Show item details and equipment status

  2. Integrate ASCII state into InventoryScene:
     - Add asciiState and asciiRenderer properties
     - Check feature flags on construction and enter
     - Implement syncASCIIState method
     - Update renderLayered to use ASCII when enabled
     - Ensure bidirectional sync between scene and ASCII state

  3. Add feature flag for inventory scene:
     - Add ASCII_INVENTORY_SCENE to FeatureFlagKey enum
     - Register flag in FeatureFlagsManager

  4. Create comprehensive tests:
     - Test ASCII rendering activation
     - Test all inventory modes
     - Test scene transitions
     - Test feature flag toggling

  Key patterns to follow:
  - Use 80x24 ASCII grid (ASCII_GRID_WIDTH x ASCII_GRID_HEIGHT)
  - Draw borders with drawBox method
  - Center text with Math.floor((ASCII_GRID_WIDTH - text.length) / 2)
  - Handle scrolling with scrollOffset for long lists
  - Sync state after every input handling