version: "0.1"
plan_id: "temple-implementation-002"
project_name: "Wizardry Gaiden IV Temple Implementation"
agent_profile: "ai-coding-agent-v1"
entry_node: "analyze-temple-requirements"

context:
  business_goal: "Implement Temple services with authentic Wizardry Gaiden IV mechanics"
  non_functional_requirements:
    - "Maintain TypeScript strict mode compliance"
    - "Use existing UI patterns from Inn and Shop scenes"
    - "Integrate with existing Character status system"
    - "Handle gold transactions consistently"
  personas:
    - name: "Player"
      need: "Access to character healing and resurrection services"
    - name: "Developer"
      need: "Clean integration with existing town services architecture"

architecture:
  overview: "Temple scene providing status healing and resurrection services based on WGIV mechanics"
  constraints:
    - "Only implement services that exist in WGIV (no HP healing)"
    - "Use existing UI component patterns"
    - "Maintain save game compatibility"
  integration_points:
    - "Town scene navigation"
    - "Character status system"
    - "Gold transaction system"
    - "Message log system"

nodes:
  - id: "analyze-temple-requirements"
    status: "Complete"
    materialization: 1.0
    description: "Document Temple service requirements from WGIV"
    detailed_description: |
      Based on research, WGIV Temple services include:
      - Cure Paralyzed (300g)
      - Cure Stoned (300g)
      - Resurrect from Dead (cost TBD - estimate 500g)
      - Resurrect from Ashes (cost TBD - estimate 1000g)
      - Dispel Curse (cost TBD - estimate 250g per item)

      NOT included (per WGIV):
      - HP restoration (Inn only)
      - Poison cure (auto-cures on dungeon exit)
      - MP restoration (Inn only)

      Note: Resurrection can fail and turn dead to ashes
    outputs: ["docs/temple-requirements.md"]
    agent_action: "Document requirements"
    role: "agent"
    downstream: ["create-temple-types"]

  - id: "create-temple-types"
    status: "Complete"
    materialization: 1.0
    description: "Create TypeScript types for Temple services"
    detailed_description: |
      Create types in src/types/TempleTypes.ts:
      - TempleService enum (cure_paralyzed, cure_stoned, resurrect_dead, resurrect_ashes, dispel_curse)
      - TempleState type (main, selectCharacter, selectService, confirmService, serviceResult)
      - ServiceCost interface with gold amounts
      - ResurrectionResult type (success, turned_to_ashes, lost)
    outputs: ["src/types/TempleTypes.ts"]
    agent_action: "Create type definitions"
    role: "agent"
    downstream: ["create-temple-state-manager"]

  - id: "create-temple-state-manager"
    status: "Complete"
    materialization: 1.0
    description: "Create Temple state management system"
    detailed_description: |
      Created src/systems/temple/TempleStateManager.ts with:
      - State tracking (main, selectService, selectCharacter, confirmService, serviceResult)
      - Service eligibility checking based on character status
      - Gold affordability validation
      - Character filtering for services
      - Service descriptions with cost and eligibility info
      - TypeScript strict mode compliance
    outputs: ["src/systems/temple/TempleStateManager.ts"]
    agent_action: "Implement state manager"
    role: "agent"
    downstream: ["create-temple-service-handler"]

  - id: "create-temple-service-handler"
    status: "Complete"
    materialization: 1.0
    description: "Create Temple service execution handler"
    detailed_description: |
      Implemented src/systems/temple/TempleServiceHandler.ts with:
      - Cure paralyzed/stoned (100% success)
      - Resurrect from dead with vitality/level-based success chance
      - Resurrect from ashes with lower success chance
      - Dispel curse on all equipped cursed items
      - Gold transaction handling before service execution
      - Detailed ServiceExecutionResult with messages and resurrection details
      - Character status, vitality, age updates
      - TypeScript strict mode compliance
    outputs: ["src/systems/temple/TempleServiceHandler.ts"]
    agent_action: "Implement service handler"
    role: "agent"
    acceptance_criteria:
      - "Resurrection has appropriate failure chances (complete)"
      - "Gold deducted correctly (complete)"
      - "Character status updated (complete)"
    downstream: ["create-temple-ui-renderer"]

  - id: "create-temple-ui-renderer"
    status: "Complete"
    materialization: 1.0
    description: "Create Temple UI renderer"
    detailed_description: |
      Created src/systems/temple/TempleUIRenderer.ts with comprehensive three-panel layout:
      - Left panel: StatusPanel (10, 80, 240, 480) for party status with condition highlighting
      - Center panel: (260, 80, 500, 480) context-aware screens for all Temple states
        * Welcome screen with service list and party needs
        * Service selection with costs and affordability indicators
        * Character selection with eligibility checking
        * Service confirmation with warnings
        * Service result display with resurrection outcomes
      - Right panel: (770, 80, 240, 480) service info, controls, and party status summary
      - Consolidated ServiceExecutionResult type to TempleTypes for consistency
      - Color-coded status conditions and eligibility indicators
      - Resurrection warnings for dangerous services
      - TypeScript strict mode compliance
    outputs: ["src/systems/temple/TempleUIRenderer.ts", "src/types/TempleTypes.ts (updated)"]
    agent_action: "Implement UI renderer"
    role: "agent"
    downstream: ["create-temple-input-handler"]

  - id: "create-temple-input-handler"
    status: "Complete"
    materialization: 1.0
    description: "Create Temple input handler"
    detailed_description: |
      Implemented src/systems/temple/TempleInputHandler.ts with:
      - Main menu navigation (Temple Services, Leave Temple)
      - Service selection with gold/eligibility checks
      - Character selection filtered by service eligibility
      - Confirmation prompts with warnings for resurrection
      - Service result display with cleanup
      - Escape key navigation at all states
      - MenuInputHandler integration for consistency
      - TypeScript strict mode compliance
    outputs: ["src/systems/temple/TempleInputHandler.ts"]
    agent_action: "Implement input handler"
    role: "agent"
    downstream: ["create-temple-scene"]

  - id: "create-temple-scene"
    status: "Complete"
    materialization: 1.0
    description: "Create main Temple scene"
    detailed_description: |
      Created src/scenes/TempleScene.ts following established scene pattern:
      - Integrated all Temple components (state manager, service handler, UI renderer, input handler)
      - Initialize with party data and welcome message
      - Scene lifecycle methods (enter, exit, update, render, renderLayered)
      - Message log integration with proper error handling
      - Input handling with key normalization
      - TypeScript strict mode compliance verified
      - Note: ASCII layer support not needed (no other scenes use it)
    outputs: ["src/scenes/TempleScene.ts"]
    agent_action: "Implement Temple scene"
    role: "agent"
    downstream: ["integrate-temple-with-town"]

  - id: "integrate-temple-with-town"
    status: "Complete"
    materialization: 1.0
    description: "Add Temple to Town scene"
    detailed_description: |
      Successfully integrated Temple with Town scene:
      - Updated src/scenes/TownScene.ts:
        * Replaced console.log placeholder with sceneManager.switchTo('temple')
        * Updated Temple description to "Cure ailments, resurrect the dead, and dispel curses."
      - Updated src/core/Game.ts:
        * Added TempleScene import
        * Registered temple scene: sceneManager.addScene('temple', new TempleScene(...))
      - TypeScript strict mode compliance verified
      - Temple now accessible from Town menu (second option)
    outputs: ["src/scenes/TownScene.ts", "src/core/Game.ts"]
    agent_action: "Integrate Temple with Town"
    role: "agent"
    downstream: ["test-temple-services"]

  - id: "test-temple-services"
    status: "In Progress"
    materialization: 0.7
    description: "Test Temple services and refine implementation"
    detailed_description: |
      Significant progress made, but more testing needed:

      Completed refinements:
      - Fixed gold display to show sum of all character gold
      - Implemented level-based service costs (Base Cost Ã— Character Level)
      - Implemented automatic gold pooling (payer first, then other party members)
      - Added "who will pay?" selection flow
      - Fixed eligibility checks and navigation issues
      - Moved costs to GAME_CONFIG.TEMPLE.SERVICE_COSTS and GAME_CONFIG.TEMPLE.RESURRECTION
      - Created comprehensive temple-mechanics.md documentation
      - Fixed confirmation screen cost display

      Known issues/remaining work:
      - More thorough testing needed for all service types
      - Need to verify resurrection success/failure mechanics work correctly
      - Need to test edge cases (insufficient gold, multiple resurrections, etc.)
      - UI refinements may be needed based on further testing
      - Save game persistence after services needs verification
    outputs: [
      "docs/temple-mechanics.md",
      "docs/DOCS_INDEX.yaml (updated)",
      "src/config/GameConstants.ts (updated)",
      "src/systems/temple/TempleStateManager.ts (updated)",
      "src/systems/temple/TempleServiceHandler.ts (updated)",
      "src/systems/temple/TempleUIRenderer.ts (updated)",
      "src/systems/temple/TempleInputHandler.ts (updated)"
    ]
    agent_action: "Testing, debugging, and refinement"
    role: "agent"
    acceptance_criteria:
      - "All services function correctly (partial - needs more testing)"
      - "Gold deducted with automatic pooling (implemented, needs verification)"
      - "Level-based costs implemented (complete)"
      - "All magic numbers moved to constants (complete)"
      - "UI displays correctly (mostly complete, may need refinements)"
      - "Documentation complete (complete)"
    downstream: ["refine-temple-ui"]

  - id: "refine-temple-ui"
    status: "Ready"
    materialization: 0.0
    description: "Refine Temple UI and complete testing"
    detailed_description: |
      Next steps for Temple completion:
      - Test all five services thoroughly
      - Verify resurrection mechanics (success/failure, vitality loss, age increase)
      - Test automatic gold pooling in various scenarios
      - Verify save game persistence
      - Test edge cases and error handling
      - Make any necessary UI refinements based on testing
      - Ensure all services work with different character levels
    outputs: ["Refined Temple implementation"]
    agent_action: "Testing and refinement"
    role: "agent"