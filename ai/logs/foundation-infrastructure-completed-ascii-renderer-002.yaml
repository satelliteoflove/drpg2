node_id: foundation-infrastructure
checklist:
  unit_tests: false
  integration_tests: false
  e2e_tests: false
outcome: |
  Successfully created the foundational ASCII rendering infrastructure with all required components.
  Implemented a complete three-layer architecture (ASCII State -> Scene Declaration -> Canvas Renderer) 
  with feature flags for controlled migration. All files compile successfully with TypeScript strict mode.
  
  Created files:
  - ASCIIState.ts: Grid management with dirty region tracking and serialization
  - SceneDeclaration.ts: Declarative scene interfaces with UI helpers
  - ASCIISymbols.ts: Comprehensive symbol definitions with color mappings
  - CanvasRenderer.ts: Optimized canvas rendering with character caching
  - FeatureFlags.ts: Runtime-configurable feature flag system
manual_test_instructions: |
  1. Run 'npm run dev' to start the development server
  2. Open browser developer console (F12)
  3. Test feature flags by typing:
     - FeatureFlags.status() - View all feature flags
     - FeatureFlags.enable('ascii_rendering') - Enable ASCII rendering
     - FeatureFlags.disable('ascii_rendering') - Disable ASCII rendering
  4. Verify no errors in console
  5. Check that game still runs normally (no integration yet)
  6. Feature flags persist across page refreshes (stored in localStorage)
surprises_or_notes: |
  - Character caching system implemented for performance optimization
  - Feature flags accessible via browser console for easy testing
  - Dirty region tracking included for optimized rendering
  - Symbol color mappings defined but not yet integrated into renderer
  - All components designed for testability without canvas dependencies
suggested_follow_ups:
  - Implement unit tests for ASCIIState grid operations
  - Add performance benchmarks for character rendering
  - Create ASCII art generator utilities
  - Implement scene transition animations
  - Add ASCII export/import for debugging
reimplementation_prompt: |
  Create ASCII rendering infrastructure for a TypeScript game engine migration.

  Requirements:
  - 80x25 ASCII grid standard with cell metadata
  - Declarative scene declaration system
  - Canvas renderer with character caching
  - Comprehensive symbol definitions
  - Feature flag system for gradual migration

  Architecture:
  1. ASCIIState: Grid management with dirty tracking, serialization
  2. SceneDeclaration: Declarative UI with input zones, layers, animations
  3. ASCIISymbols: Central symbol repository with color mappings
  4. CanvasRenderer: Optimized rendering with caching, 10x20px characters
  5. FeatureFlags: Per-scene flags with runtime overrides

  Key design decisions:
  - Use Map for metadata with "x,y" string keys
  - Implement SceneBuilder pattern for fluent scene creation
  - Cache rendered characters to avoid repeated text drawing
  - Feature flags persist in localStorage with URL override support
  - All components must work with TypeScript strict mode